version: '3.8'

services:
  rag-mcp-server:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: rag-anything-mcp:latest
    container_name: rag-mcp-server
    restart: unless-stopped

    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - RAG_WORKING_DIR=/app/rag_storage
      - ENABLE_METRICS=true
      - METRICS_PORT=9090

    volumes:
      # Persistent storage for RAG data
      - rag-storage:/app/rag_storage
      # Logs directory
      - ./logs:/app/logs
      # Optional: Mount document directories for processing
      - ${DOCUMENTS_PATH:-./documents}:/documents:ro

    ports:
      # Metrics endpoint
      - "9090:9090"

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    networks:
      - rag-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    profiles:
      - monitoring

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    ports:
      - "9091:9090"

    networks:
      - rag-network

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    profiles:
      - monitoring

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false

    volumes:
      - grafana-data:/var/lib/grafana

    ports:
      - "3000:3000"

    networks:
      - rag-network

    depends_on:
      - prometheus

volumes:
  rag-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  rag-network:
    driver: bridge
